datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  ciToken       String?         @unique
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auditLogs AuditLogs[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model App {
  id        Int       @id @unique @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  deleted   Boolean   @default(false)
  versions  Version[]
  auditLogs AuditLogs[]
}

model Version {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  value     String
  builtAt   DateTime?
  appId     Int
  deleted   Boolean   @default(false)

  dependencies Dependency[] @relation("AppVersionDependency")
  dependsOn    Dependency[] @relation("AppVersionDependsOn")
  app          App          @relation(fields: [appId], references: [id], onDelete: Cascade)
  auditLogs    AuditLogs[]
}

model Dependency {
  id                     Int      @id @unique @default(autoincrement())
  createdAt              DateTime @default(now())
  dependantAppVersionId  Int
  dependencyAppVersionId Int
  deleted                Boolean  @default(false)

  dependantAppVersion  Version @relation("AppVersionDependency", fields: [dependantAppVersionId], references: [id], onDelete: Cascade)
  dependencyAppVersion Version @relation("AppVersionDependsOn", fields: [dependencyAppVersionId], references: [id], onDelete: Cascade)
  auditLogs            AuditLogs[]
}

model AuditLogs {
  id           Int      @id @unique @default(autoincrement())
  timestamp    DateTime
  action       String
  userId       String?
  appId        Int?
  versionId    Int?
  dependencyId Int?

  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  app        App?        @relation(fields: [appId], references: [id], onDelete: SetNull)
  version    Version?    @relation(fields: [versionId], references: [id], onDelete: SetNull)
  dependency Dependency? @relation(fields: [dependencyId], references: [id], onDelete: SetNull)
}
